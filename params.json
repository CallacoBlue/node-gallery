{"tagline":"NodeJS Photo Gallery","body":"node-gallery\r\n============\r\n\r\nNodeJS Photo Gallery. Feed it a directory of photos, get back a JSON object & a styled photo gallery ready for the web. \r\n* No database needed\r\n* Folders titles = Album titles\r\n* Image titles = Photo Titles\r\n* EXIF title = Description\r\n* Displays camera capture info (exposure, aperture, ISO..)\r\n* Optional album description, album thumbnail by info.json\r\n\r\nInstallation\r\n============\r\n\r\n    $ npm install node-gallery\r\n\r\nExamples\r\n===================\r\nA usage example using node-gallery with Express can be found in app.js. It should be simple to use with a framework of your choice - EJS templates are included.\r\n\r\nPhotos\r\n===================\r\nPhotos are added to your specified 'directory', in the example \"photos\". Albums are created for every folder we encounter, and thumbnails are automatically generated by using the first image we come across in this album.\r\nAn optional info.json file can be supplied in an album to supply:\r\n*Description* Plaintext album description, can contain HTML\r\n*Thumbnail* Override the default thumbnail we find for this album. Specified relative to the current album, so if it's a photo in the album 'image.jpg', and if it's in a child album 'childAlbumFolderName/image.jpg'\r\n*Name* Override the default album name we obtain from the directory. Won't reflect in the breadcrumb for now because of the way it's constructed - hoping to change this soon!\r\n    {\r\n      \"description\" : \"Album <strongDescription</strong>.\",\r\n      \"thumbnail\" : \"North%20Coast/_MG_0925.jpg\",\r\n      name: \"Some Overriding Name\"\r\n    }\r\n\r\nUsage (ExpressJS)\r\n===================\r\n    /*\r\n     * Tested using Express 3.0 alpha - full example in 'app.js'\r\n     */\r\n\r\n    // Setup our app to use gallery middleware - also does init\r\n    app.configure(function(){\r\n      app.use(gallery.middleware({static: 'resources', directory: '/photos', rootURL: \"/gallery\"}));\r\n    });\r\n\r\n    // now, our middleware does gallery lookups for every URL under rootURL - e.g. /gallery\r\n    app.get('/gallery*', function(req, res){\r\n      // We automatically have the gallery data available to us in req thanks to middleware\r\n      var data = req.gallery;\r\n      // and we can res.render using one of the supplied templates (photo.ejs/album.ejs) or one of our own\r\n      res.render(data.type + '.ejs', data);\r\n    });\r\n\r\n\r\nUsage (Standalone)\r\n===================\r\n\r\n    gallery.init({\r\n      static: 'resources',\r\n      directory: '/photos',\r\n      rootURL: '/gallery'\r\n    });\r\n\r\n    /*\r\n     * Now we can use gallery.getPhoto or gallery.getAlbum to pass web requests through to node-gallery\r\n     */\r\n    gallery.getAlbum({\r\n          album: 'Ireland/Co. Waterford',\r\n        }, function(err, album){\r\n          // photo contains a JSON object representing our album.\r\n          // Now, we'd pass this photo to ejs.render('views/album.ejs', album);\r\n    });\r\n\r\n    gallery.getPhoto({\r\n      album: 'Ireland/Co. Waterford',\r\n      photo: 'IMG_2040.jpg'\r\n    }, function(err, photo){\r\n      // photo contains a JSON object representing our photo.\r\n      // Now, we'd pass this photo to ejs.render('views/photo.ejs', photo);\r\n    });\r\n\r\n\r\nTests\r\n============\r\nTests are written in raw javascript. To run,\r\n\r\n    $ npm test\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Node-gallery","google":""}